//===-- pISASubtarget.h - pISA Subtarget Information --------*- C++ -*--===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the pISA specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_pISA_pISASUBTARGET_H
#define LLVM_LIB_TARGET_pISA_pISASUBTARGET_H

#include "pISACallLowering.h"
#include "pISAFrameLowering.h"
#include "pISAISelLowering.h"
#include "pISAInstrInfo.h"
#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "pISAGenSubtargetInfo.inc"

namespace llvm {
class StringRef;
class pISATargetMachine;

class pISASubtarget : public pISAGenSubtargetInfo {
private:
  uint32_t pISAVersion;
  
  pISAInstrInfo InstrInfo;
  pISAFrameLowering FrameLowering;
  pISATargetLowering TLInfo;

  // GlobalISel related APIs.
  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<InstructionSelector> InstSelector;

public:
  // This constructor initializes the data members to match that
  // of the specified triple.
  pISASubtarget(const Triple &TT, const std::string &CPU,
                 const std::string &FS, const pISATargetMachine &TM);
  pISASubtarget &initSubtargetDependencies(StringRef CPU, StringRef FS);

  // Parses features string setting specified subtarget options.
  // The definition of this function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  uint32_t getpISAVersion() const { return pISAVersion; };

  const CallLowering *getCallLowering() const override {
    return CallLoweringInfo.get();
  }
  const RegisterBankInfo *getRegBankInfo() const override {
    return RegBankInfo.get();
  }
  const LegalizerInfo *getLegalizerInfo() const override {
    return Legalizer.get();
  }
  InstructionSelector *getInstructionSelector() const override {
    return InstSelector.get();
  }
  const pISAInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const pISAFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const pISATargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const pISARegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
};
} // namespace llvm

#endif // LLVM_LIB_TARGET_pISA_pISASUBTARGET_H
