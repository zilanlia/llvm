//===-- pISAInstPrinter.h - Output pISA MCInsts as ASM -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints a pISA MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_pISA_INSTPRINTER_pISAINSTPRINTER_H
#define LLVM_LIB_TARGET_pISA_INSTPRINTER_pISAINSTPRINTER_H

#include "MCTargetDesc/pISABaseInfo.h"
#include "llvm/ADT/DenseSet.h"
#include "llvm/MC/MCInstPrinter.h"

namespace llvm {
class pISAInstPrinter : public MCInstPrinter {

public:
  using MCInstPrinter::MCInstPrinter;

  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &OS) override;
  void printRegName(raw_ostream &OS, MCRegister Reg) const override;
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                    const char *Modifier = nullptr);

  void printImm1Opnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printImm8Opnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printImm16Opnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printImm32Opnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printImm64Opnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printFpImm16Opnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printFpImm32Opnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printFpImm64Opnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);

  void printPredOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printReg8bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printReg16bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printReg32bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printReg64bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV2_8bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV4_8bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV2_16bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV3_16bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV4_16bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV2_32bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV3_32bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV4_32bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV2_64bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV3_64bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);
  void printRegV4_64bOpnd(const MCInst *MCI, unsigned OpNo, raw_ostream &OS);

  void negateRepr(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void swizzleRepr(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printRegNoSwizzle(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printFenceScope(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printStringImm(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printAddrOffsetImm(const MCInst *MI, unsigned OpNo, raw_ostream &O);

  void printMemOperand(const MCInst *MI, int OpNo, raw_ostream &O,
                         const char *Modifier = nullptr);
  // print CallTargetFunc operand (reg or function name) and the sub-sequent
  // function arguments
  void printCallTargetFunc(const MCInst *MI, unsigned OpNo, raw_ostream &O);

  // Autogenerated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  static const char *getRegisterName(MCRegister Reg);

private:
  void printSwizzle(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void swizzleRepr(raw_ostream &O, unsigned SwizzleVal);
  void printDebugLoc(const MCInst *MI, raw_ostream &OS);
};
} // namespace llvm

#endif // LLVM_LIB_TARGET_pISA_INSTPRINTER_pISAINSTPRINTER_H
